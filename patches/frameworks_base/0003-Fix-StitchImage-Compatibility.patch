From 0297ebc3e979244e1f8406878bfb09eb2d337bce Mon Sep 17 00:00:00 2001
From: Twel12 <shivansh.aeyron@gmail.com>
Date: Sat, 29 Aug 2020 21:48:44 +0530
Subject: [PATCH] Fix StitchImage Compatibility

Change-Id: I3e7e901d7a21c40a83f63596d2bfa52ea0be326b
---
 core/java/android/view/IWindowManager.aidl    |   6 +
 .../custom/screenshot/StitchImageUtility.java | 112 ++++++++++++++++++
 .../internal/util/ScreenshotHelper.java       |  44 ++++++-
 packages/SystemUI/AndroidManifest.xml         |   3 +
 .../SystemUI/res/values/custom_config.xml     |   4 +
 .../globalactions/GlobalActionsDialog.java    |   6 +-
 .../systemui/screenshot/GlobalScreenshot.java |   2 +-
 .../statusbar/policy/CastControllerImpl.java  |   6 +
 .../server/policy/PhoneWindowManager.java     |   6 +
 .../server/policy/WindowManagerPolicy.java    |   6 +
 .../server/uri/UriGrantsManagerService.java   |   6 +-
 .../com/android/server/wm/DisplayPolicy.java  |   4 +-
 .../server/wm/WindowManagerService.java       |   5 +
 13 files changed, 204 insertions(+), 6 deletions(-)
 create mode 100644 core/java/com/android/internal/custom/screenshot/StitchImageUtility.java

diff --git a/core/java/android/view/IWindowManager.aidl b/core/java/android/view/IWindowManager.aidl
index b347a78a..558a8352 100644
--- a/core/java/android/view/IWindowManager.aidl
+++ b/core/java/android/view/IWindowManager.aidl
@@ -638,4 +638,10 @@ interface IWindowManager
      * native InputManager before proceeding with tests.
      */
     void syncInputTransactions();
+
+    /**
+     * Long screenshot
+     * @hide
+     */
+    void takeAlternativeScreenshot();
 }
diff --git a/core/java/com/android/internal/custom/screenshot/StitchImageUtility.java b/core/java/com/android/internal/custom/screenshot/StitchImageUtility.java
new file mode 100644
index 00000000..4c1ec305
--- /dev/null
+++ b/core/java/com/android/internal/custom/screenshot/StitchImageUtility.java
@@ -0,0 +1,112 @@
+/*
+ * Copyright (C) 2019 PixelExperience
+ *
+ * This program is free software; you can redistribute it and/or modify it under the terms of the
+ * GNU General Public License as published by the Free Software Foundation; either version 3 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
+ * the GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with this program;
+ * if not, see <http://www.gnu.org/licenses>.
+ */
+
+package com.android.internal.custom.screenshot;
+
+import android.content.ComponentName;
+import android.content.Context;
+import android.content.Intent;
+import android.content.pm.PackageManager;
+import android.content.pm.ResolveInfo;
+import android.media.AudioManager;
+import android.media.MediaActionSound;
+import android.net.Uri;
+import android.os.UserHandle;
+import android.os.VibrationEffect;
+import android.os.Vibrator;
+import android.util.Log;
+
+import java.util.List;
+
+public class StitchImageUtility {
+    public static final String STITCHIMAGE_APP_PACKAGE_NAME = "com.asus.stitchimage";
+    public static final String STITCHIMAGE_FILEPROVIDER_CLASS = "com.asus.stitchimage.fileprovider";
+    private static final String STITCHIMAGE_OVERLAY_SERVICE_CLASS = "com.asus.stitchimage.OverlayService";
+    private static final String STITCHIMAGE_SERVICE_PACKAGE_NAME = "com.asus.stitchimage.service";
+    private static final String EXTRA_KEY_STITCHIMAGE_SETTINGS_CALLFROM = "callfrom";
+    private static final String EXTRA_VALUE_STITCHIMAGE_SETTINGS_CALLFROM_ASUSSETTINGS = "AsusSettings";
+    private static String TAG = "StitchImageUtility";
+    private final Context mContext;
+    private MediaActionSound mCameraSound;
+    private AudioManager mAudioManager;
+    private Vibrator mVibrator;
+    private PackageManager mPackageManager;
+
+    public StitchImageUtility(Context context) {
+        mContext = context;
+        mPackageManager = mContext.getPackageManager();
+        // Grab system services needed for screenshot sound
+        mAudioManager = (AudioManager) mContext.getSystemService(Context.AUDIO_SERVICE);
+        mVibrator = (Vibrator) mContext.getSystemService(Context.VIBRATOR_SERVICE);
+    }
+
+    public boolean takeScreenShot(String focusedPackageName) {
+        if (isPackageAllowed(focusedPackageName)) {
+            try {
+                Log.i(TAG, "Take long screenshot.");
+                Intent intent = new Intent();
+                intent.setComponent(new ComponentName(STITCHIMAGE_APP_PACKAGE_NAME, STITCHIMAGE_OVERLAY_SERVICE_CLASS));
+                intent.putExtra(EXTRA_KEY_STITCHIMAGE_SETTINGS_CALLFROM, EXTRA_VALUE_STITCHIMAGE_SETTINGS_CALLFROM_ASUSSETTINGS);
+                mContext.startServiceAsUser(intent, UserHandle.CURRENT);
+                playScreenshotSound();
+                return true;
+            } catch (Exception e) {
+                Log.e(TAG, "trigger stitchimage failed, Exception :" + e);
+            }
+        }
+        return false;
+    }
+
+    private void playScreenshotSound(){
+        if (mCameraSound == null){
+            mCameraSound = new MediaActionSound();
+            mCameraSound.load(MediaActionSound.SHUTTER_CLICK);
+        }
+        switch (mAudioManager.getRingerMode()) {
+            case AudioManager.RINGER_MODE_SILENT:
+                // do nothing
+                break;
+            case AudioManager.RINGER_MODE_VIBRATE:
+                if (mVibrator != null && mVibrator.hasVibrator()) {
+                    mVibrator.vibrate(VibrationEffect.createOneShot(50,
+                            VibrationEffect.DEFAULT_AMPLITUDE));
+                }
+                break;
+            case AudioManager.RINGER_MODE_NORMAL:
+                // Play the shutter sound to notify that we've taken a screenshot
+                mCameraSound.play(MediaActionSound.SHUTTER_CLICK);
+                break;
+        }
+    }
+
+    private boolean isPackageAllowed(String focusedPackageName){
+        if (focusedPackageName == null || focusedPackageName.equals("")
+                || focusedPackageName.equals("com.android.settings")){
+            return true;
+        }
+        if (focusedPackageName.equals("com.android.systemui")){
+            return false;
+        }
+        Intent i = new Intent(Intent.ACTION_MAIN);
+        i.addCategory(Intent.CATEGORY_HOME);
+        List<ResolveInfo> homePackages = mPackageManager.queryIntentActivities(i, 0);
+        for (ResolveInfo resolveInfo : homePackages) {
+            if (focusedPackageName.equals(resolveInfo.activityInfo.packageName)){
+                return false;
+            }
+        }
+        return true;
+    }
+}
\ No newline at end of file
diff --git a/core/java/com/android/internal/util/ScreenshotHelper.java b/core/java/com/android/internal/util/ScreenshotHelper.java
index d24d78c6..49a7e14d 100644
--- a/core/java/com/android/internal/util/ScreenshotHelper.java
+++ b/core/java/com/android/internal/util/ScreenshotHelper.java
@@ -14,6 +14,9 @@ import android.os.Messenger;
 import android.os.RemoteException;
 import android.os.UserHandle;
 import android.util.Log;
+import android.view.WindowManager;
+
+import com.android.internal.custom.screenshot.StitchImageUtility;
 
 import java.util.function.Consumer;
 
@@ -32,9 +35,11 @@ public class ScreenshotHelper {
     private final Object mScreenshotLock = new Object();
     private ServiceConnection mScreenshotConnection = null;
     private final Context mContext;
+    private final StitchImageUtility mStitchImageUtility;
 
     public ScreenshotHelper(Context context) {
         mContext = context;
+        mStitchImageUtility = new StitchImageUtility(mContext);
     }
 
     /**
@@ -61,7 +66,36 @@ public class ScreenshotHelper {
             final boolean hasNav, @NonNull Handler handler,
             @Nullable Consumer<Uri> completionConsumer) {
         takeScreenshot(screenshotType, hasStatus, hasNav, SCREENSHOT_TIMEOUT_MS, handler,
-                completionConsumer);
+                completionConsumer, null);
+    }
+
+    /**
+     * Request a screenshot be taken.
+     *
+     * Added to support reducing unit test duration; the method variant without a timeout argument
+     * is recommended for general use.
+     *
+     * @param screenshotType     The type of screenshot, for example either
+     *                           {@link android.view.WindowManager.TAKE_SCREENSHOT_FULLSCREEN}
+     *                           or
+     *                           {@link android.view.WindowManager.TAKE_SCREENSHOT_SELECTED_REGION}
+     * @param hasStatus          {@code true} if the status bar is currently showing. {@code false}
+     *                           if
+     *                           not.
+     * @param hasNav             {@code true} if the navigation bar is currently showing. {@code
+     *                           false}
+     *                           if not.
+     * @param handler            A handler used in case the screenshot times out
+     * @param completionConsumer Consumes `null` if a screenshot was not taken, and the URI of the
+     *                           screenshot if the screenshot was taken.
+     * @param focusedPackageName The focused package name
+     */
+    public void takeScreenshot(final int screenshotType, final boolean hasStatus,
+            final boolean hasNav, @NonNull Handler handler,
+            @Nullable Consumer<Uri> completionConsumer,
+            final String focusedPackageName) {
+        takeScreenshot(screenshotType, hasStatus, hasNav, SCREENSHOT_TIMEOUT_MS, handler,
+                completionConsumer, focusedPackageName);
     }
 
     /**
@@ -86,11 +120,17 @@ public class ScreenshotHelper {
      * @param handler            A handler used in case the screenshot times out
      * @param completionConsumer Consumes `null` if a screenshot was not taken, and the URI of the
      *                           screenshot if the screenshot was taken.
+     * @param focusedPackageName The focused package name
      */
     public void takeScreenshot(final int screenshotType, final boolean hasStatus,
             final boolean hasNav, long timeoutMs, @NonNull Handler handler,
-            @Nullable Consumer<Uri> completionConsumer) {
+            @Nullable Consumer<Uri> completionConsumer,
+            final String focusedPackageName) {
         synchronized (mScreenshotLock) {
+            if (screenshotType == WindowManager.TAKE_SCREENSHOT_FULLSCREEN &&
+                    mStitchImageUtility.takeScreenShot(focusedPackageName)){
+                return;
+            }
             if (mScreenshotConnection != null) {
                 return;
             }
diff --git a/packages/SystemUI/AndroidManifest.xml b/packages/SystemUI/AndroidManifest.xml
index 8b5493f2..be0347e7 100644
--- a/packages/SystemUI/AndroidManifest.xml
+++ b/packages/SystemUI/AndroidManifest.xml
@@ -257,6 +257,9 @@
     <protected-broadcast android:name="com.google.android.systemui.smartspace.EXPIRE_EVENT"/>
     <protected-broadcast android:name="com.google.android.systemui.smartspace.CLICK_EVENT"/>
 
+    <!-- Asus Long screenshot -->
+    <uses-permission android:name="com.asus.stitchimage.permission.EXPORTED_FOR_ASUS_APPS"/>
+    
     <application
         android:name=".SystemUIApplication"
         android:persistent="true"
diff --git a/packages/SystemUI/res/values/custom_config.xml b/packages/SystemUI/res/values/custom_config.xml
index d0941241..0add0441 100644
--- a/packages/SystemUI/res/values/custom_config.xml
+++ b/packages/SystemUI/res/values/custom_config.xml
@@ -35,4 +35,8 @@
 
     <!-- Whether usage of the proximity sensor during doze is supported -->
     <bool name="doze_proximity_sensor_supported">true</bool>
+
+    <!-- Asus stitch editor component name -->
+    <string name="config_stitchEditor">com.asus.stitchimage/com.asus.stitchimage.editor.ScreenshotEditorActivity</string>
+    
 </resources>
diff --git a/packages/SystemUI/src/com/android/systemui/globalactions/GlobalActionsDialog.java b/packages/SystemUI/src/com/android/systemui/globalactions/GlobalActionsDialog.java
index 233ac1c2..afcebbb8 100644
--- a/packages/SystemUI/src/com/android/systemui/globalactions/GlobalActionsDialog.java
+++ b/packages/SystemUI/src/com/android/systemui/globalactions/GlobalActionsDialog.java
@@ -615,7 +615,11 @@ public class GlobalActionsDialog implements DialogInterface.OnDismissListener,
             mHandler.postDelayed(new Runnable() {
                 @Override
                 public void run() {
-                    mScreenshotHelper.takeScreenshot(1, true, true, mHandler, null);
+                    try {
+                        WindowManagerGlobal.getWindowManagerService().takeAlternativeScreenshot();
+                    } catch (RemoteException e) {
+                        Log.e("GlobalActionsDialog", "Error while trying to takeAlternativeScreenshot.", e);
+                    }
                     MetricsLogger.action(mContext,
                             MetricsEvent.ACTION_SCREENSHOT_POWER_MENU);
                 }
diff --git a/packages/SystemUI/src/com/android/systemui/screenshot/GlobalScreenshot.java b/packages/SystemUI/src/com/android/systemui/screenshot/GlobalScreenshot.java
index 644c2644..90e45089 100644
--- a/packages/SystemUI/src/com/android/systemui/screenshot/GlobalScreenshot.java
+++ b/packages/SystemUI/src/com/android/systemui/screenshot/GlobalScreenshot.java
@@ -436,7 +436,7 @@ class SaveImageInBackgroundTask extends AsyncTask<Void, Void, Void> {
 
         // Create an edit intent, if a specific package is provided as the editor, then launch
         // that directly
-        String editorPackage = context.getString(R.string.config_screenshotEditor);
+        String editorPackage = context.getString(R.string.config_stitchEditor);
         Intent editIntent = new Intent(Intent.ACTION_EDIT);
         if (!TextUtils.isEmpty(editorPackage)) {
             editIntent.setComponent(ComponentName.unflattenFromString(editorPackage));
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/policy/CastControllerImpl.java b/packages/SystemUI/src/com/android/systemui/statusbar/policy/CastControllerImpl.java
index f16c345c..f1ca80eb 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/policy/CastControllerImpl.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/policy/CastControllerImpl.java
@@ -49,6 +49,8 @@ import javax.inject.Singleton;
 
 import com.android.internal.util.custom.recorder.RecorderConstants;
 
+import com.android.internal.custom.screenshot.StitchImageUtility;
+
 /** Platform implementation of the cast controller. **/
 @Singleton
 public class CastControllerImpl implements CastController {
@@ -182,6 +184,10 @@ public class CastControllerImpl implements CastController {
                     RecorderConstants.APP_PACKAGE_NAME)){
                 mProjection = null;
             }
+            if (mProjection != null && mProjection.getPackageName().equals(
+                    StitchImageUtility.STITCHIMAGE_APP_PACKAGE_NAME)){
+                mProjection = null;
+            }
             if (mProjection != null) {
                 final CastDevice device = new CastDevice();
                 device.id = mProjection.getPackageName();
diff --git a/services/core/java/com/android/server/policy/PhoneWindowManager.java b/services/core/java/com/android/server/policy/PhoneWindowManager.java
index 8b4a2e48..f8f3d8f3 100644
--- a/services/core/java/com/android/server/policy/PhoneWindowManager.java
+++ b/services/core/java/com/android/server/policy/PhoneWindowManager.java
@@ -6299,4 +6299,10 @@ public class PhoneWindowManager implements WindowManagerPolicy {
         }
     }
 
+    @Override
+    public void takeAlternativeScreenshot() {
+        mScreenshotRunnable.setScreenshotType(TAKE_SCREENSHOT_FULLSCREEN);
+        mHandler.post(mScreenshotRunnable);
+    }
+    
 }
diff --git a/services/core/java/com/android/server/policy/WindowManagerPolicy.java b/services/core/java/com/android/server/policy/WindowManagerPolicy.java
index 6d9c7109..1ea80f1b 100644
--- a/services/core/java/com/android/server/policy/WindowManagerPolicy.java
+++ b/services/core/java/com/android/server/policy/WindowManagerPolicy.java
@@ -1501,4 +1501,10 @@ public interface WindowManagerPolicy extends WindowManagerPolicyConstants {
      * @return whether the value was changed.
      */
     boolean setAodShowing(boolean aodShowing);
+
+    /**
+     * Long screenshot
+     * @hide
+     */
+    void takeAlternativeScreenshot();    
 }
diff --git a/services/core/java/com/android/server/uri/UriGrantsManagerService.java b/services/core/java/com/android/server/uri/UriGrantsManagerService.java
index 55f062bc..797edde9 100644
--- a/services/core/java/com/android/server/uri/UriGrantsManagerService.java
+++ b/services/core/java/com/android/server/uri/UriGrantsManagerService.java
@@ -104,6 +104,8 @@ import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
 
+import com.android.internal.custom.screenshot.StitchImageUtility;
+
 /** Manages uri grants. */
 public class UriGrantsManagerService extends IUriGrantsManager.Stub {
     private static final boolean DEBUG = false;
@@ -1033,12 +1035,14 @@ public class UriGrantsManagerService extends IUriGrantsManager.Stub {
         final int callingAppId = UserHandle.getAppId(callingUid);
         if ((callingAppId == SYSTEM_UID) || (callingAppId == ROOT_UID)) {
             if ("com.android.settings.files".equals(grantUri.uri.getAuthority())
-                    || "com.android.settings.module_licenses".equals(grantUri.uri.getAuthority())) {
+                    || "com.android.settings.module_licenses".equals(grantUri.uri.getAuthority())
+                    || StitchImageUtility.STITCHIMAGE_FILEPROVIDER_CLASS.equals(grantUri.uri.getAuthority())) {
                 // Exempted authority for
                 // 1. cropping user photos and sharing a generated license html
                 //    file in Settings app
                 // 2. sharing a generated license html file in TvSettings app
                 // 3. Sharing module license files from Settings app
+                // 4. Asus Long Screenshot app
             } else {
                 Slog.w(TAG, "For security reasons, the system cannot issue a Uri permission"
                         + " grant to " + grantUri + "; use startActivityAsCaller() instead");
diff --git a/services/core/java/com/android/server/wm/DisplayPolicy.java b/services/core/java/com/android/server/wm/DisplayPolicy.java
index 4e743a74..e57ee1d5 100644
--- a/services/core/java/com/android/server/wm/DisplayPolicy.java
+++ b/services/core/java/com/android/server/wm/DisplayPolicy.java
@@ -3662,10 +3662,12 @@ public class DisplayPolicy {
      */
     public void takeScreenshot(int screenshotType) {
         if (mScreenshotHelper != null) {
+            String packageName = mFocusedWindow == null ? "" : mFocusedWindow.getAttrs().packageName;
             mScreenshotHelper.takeScreenshot(screenshotType,
                     mStatusBar != null && mStatusBar.isVisibleLw(),
                     mNavigationBar != null && mNavigationBar.isVisibleLw(),
-                    mHandler, null /* completionConsumer */);
+                    mHandler, null /* completionConsumer */,
+                    packageName);
         }
     }
 
diff --git a/services/core/java/com/android/server/wm/WindowManagerService.java b/services/core/java/com/android/server/wm/WindowManagerService.java
index ef04d1be..ae3df158 100644
--- a/services/core/java/com/android/server/wm/WindowManagerService.java
+++ b/services/core/java/com/android/server/wm/WindowManagerService.java
@@ -7819,4 +7819,9 @@ public class WindowManagerService extends IWindowManager.Stub
                     0 /* configChanges */, !PRESERVE_WINDOWS, true /* notifyClients */);
         }
     }
+
+    @Override
+    public void takeAlternativeScreenshot() {
+        mPolicy.takeAlternativeScreenshot();
+    }
 }
-- 
2.17.1

